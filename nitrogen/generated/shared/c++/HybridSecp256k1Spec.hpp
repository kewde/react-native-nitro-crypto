///
/// HybridSecp256k1Spec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include <NitroModules/ArrayBuffer.hpp>
#include <optional>

namespace margelo::nitro::nitrocrypto {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `Secp256k1`
   * Inherit this class to create instances of `HybridSecp256k1Spec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridSecp256k1: public HybridSecp256k1Spec {
   * public:
   *   HybridSecp256k1(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridSecp256k1Spec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridSecp256k1Spec(): HybridObject(TAG) { }

      // Destructor
      ~HybridSecp256k1Spec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual bool privateKeyIsValid(const std::shared_ptr<ArrayBuffer>& privateKey) = 0;
      virtual std::shared_ptr<ArrayBuffer> privateKeyToPublicKey(const std::shared_ptr<ArrayBuffer>& privateKey, bool compressed) = 0;
      virtual bool publicKeyIsValid(const std::shared_ptr<ArrayBuffer>& publicKey, bool compressed) = 0;
      virtual std::shared_ptr<ArrayBuffer> publicKeyConvert(const std::shared_ptr<ArrayBuffer>& publicKey, bool compressed) = 0;
      virtual bool xOnlyIsValid(const std::shared_ptr<ArrayBuffer>& xOnly) = 0;
      virtual std::shared_ptr<ArrayBuffer> privateKeyTweakAdd(const std::shared_ptr<ArrayBuffer>& privateKey, const std::shared_ptr<ArrayBuffer>& tweak) = 0;
      virtual std::shared_ptr<ArrayBuffer> privateKeyTweakSubtract(const std::shared_ptr<ArrayBuffer>& privateKey, const std::shared_ptr<ArrayBuffer>& tweak) = 0;
      virtual std::shared_ptr<ArrayBuffer> privateKeyTweakNegate(const std::shared_ptr<ArrayBuffer>& privateKey) = 0;
      virtual std::shared_ptr<ArrayBuffer> publicKeyTweakAddPoint(const std::shared_ptr<ArrayBuffer>& publicKey, const std::shared_ptr<ArrayBuffer>& tweakPoint, bool compressed) = 0;
      virtual std::shared_ptr<ArrayBuffer> publicKeyTweakAddScalar(const std::shared_ptr<ArrayBuffer>& publicKey, const std::shared_ptr<ArrayBuffer>& tweak, bool compressed) = 0;
      virtual std::shared_ptr<ArrayBuffer> publicKeyTweakMultiply(const std::shared_ptr<ArrayBuffer>& publicKey, const std::shared_ptr<ArrayBuffer>& tweak, bool compressed) = 0;
      virtual std::shared_ptr<ArrayBuffer> xOnlyTweakAdd(const std::shared_ptr<ArrayBuffer>& xOnly, const std::shared_ptr<ArrayBuffer>& tweak, bool compressed) = 0;
      virtual std::shared_ptr<ArrayBuffer> ecdsaSignHash(const std::shared_ptr<ArrayBuffer>& hash, const std::shared_ptr<ArrayBuffer>& privateKey, bool der, bool recovery, const std::optional<std::shared_ptr<ArrayBuffer>>& extraEntropy) = 0;
      virtual bool ecdsaVerifyHash(const std::shared_ptr<ArrayBuffer>& signature, const std::shared_ptr<ArrayBuffer>& hash, const std::shared_ptr<ArrayBuffer>& publicKey) = 0;
      virtual std::shared_ptr<ArrayBuffer> schnorrSign(const std::shared_ptr<ArrayBuffer>& message, const std::shared_ptr<ArrayBuffer>& privateKey, const std::optional<std::shared_ptr<ArrayBuffer>>& extraEntropy) = 0;
      virtual bool schnorrVerify(const std::shared_ptr<ArrayBuffer>& signature, const std::shared_ptr<ArrayBuffer>& message, const std::shared_ptr<ArrayBuffer>& xOnly) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "Secp256k1";
  };

} // namespace margelo::nitro::nitrocrypto
